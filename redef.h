/* Generated by https://github.com/zaoqi/Expression-Oriented-C/blob/master/make.c */
/*
    Copyright (C) 2018  Zaoqi

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#define make_void exprOrientedC_LANG_make_void
#define define_type exprOrientedC_LANG_define_type
#define int8 exprOrientedC_LANG_int8
#define int16 exprOrientedC_LANG_int16
#define int32 exprOrientedC_LANG_int32
#define int64 exprOrientedC_LANG_int64
#define int_pointer exprOrientedC_LANG_int_pointer
#define nat8 exprOrientedC_LANG_nat8
#define nat16 exprOrientedC_LANG_nat16
#define nat32 exprOrientedC_LANG_nat32
#define nat64 exprOrientedC_LANG_nat64
#define nat_pointer exprOrientedC_LANG_nat_pointer
#define byte exprOrientedC_LANG_byte
#define signed_byte exprOrientedC_LANG_signed_byte
#define restrict exprOrientedC_LANG_restrict
#define cast exprOrientedC_LANG_cast
#define annotate exprOrientedC_LANG_annotate
#define bool_not exprOrientedC_LANG_bool_not
#define eq_p exprOrientedC_LANG_eq_p
#define not_eq_p exprOrientedC_LANG_not_eq_p
#define bool_and exprOrientedC_LANG_bool_and
#define bool_or exprOrientedC_LANG_bool_or
#define anonymous_struct exprOrientedC_LANG_anonymous_struct
#define declare_struct exprOrientedC_LANG_declare_struct
#define define_struct exprOrientedC_LANG_define_struct
#define anonymous_union exprOrientedC_LANG_anonymous_union
#define declare_union exprOrientedC_LANG_declare_union
#define define_union exprOrientedC_LANG_define_union
#define anonymous_enumeration exprOrientedC_LANG_anonymous_enumeration
#define declare_enumeration exprOrientedC_LANG_declare_enumeration
#define define_enumeration exprOrientedC_LANG_define_enumeration
#ifdef exprOrientedC_LANG___bool_true_false_are_defined
#define __bool_true_false_are_defined exprOrientedC_LANG___bool_true_false_are_defined
#endif
#ifdef exprOrientedC_LANG___bool_true_false_are_defined
#define bool exprOrientedC_LANG_bool
#endif
#ifdef exprOrientedC_LANG___bool_true_false_are_defined
#define true exprOrientedC_LANG_true
#endif
#ifdef exprOrientedC_LANG___bool_true_false_are_defined
#define false exprOrientedC_LANG_false
#endif
#define let_current_continuation_notFirstClass exprOrientedC_LANG_let_current_continuation_notFirstClass
#define continuation_notFirstClass_throw exprOrientedC_LANG_continuation_notFirstClass_throw
#define __ exprOrientedC_LANG___
#define lambda_s exprOrientedC_LANG_lambda_s
#define lambda_withTypeOfBody exprOrientedC_LANG_lambda_withTypeOfBody
#define var exprOrientedC_LANG_var
#define var_lambda_s_withTypeOfBody exprOrientedC_LANG_var_lambda_s_withTypeOfBody
#define if_then_else exprOrientedC_LANG_if_then_else
#define begin exprOrientedC_LANG_begin
#define declare_public exprOrientedC_LANG_declare_public
#define define_private exprOrientedC_LANG_define_private
#define define_public exprOrientedC_LANG_define_public
#define declare_private exprOrientedC_LANG_declare_private
#define declare_public_withTypeOfBody_lambda exprOrientedC_LANG_declare_public_withTypeOfBody_lambda
#define define_public_withTypeOfBody_lambda exprOrientedC_LANG_define_public_withTypeOfBody_lambda
#define declare_public_lambda_withTypeOfBody exprOrientedC_LANG_declare_public_lambda_withTypeOfBody
#define define_public_lambda_withTypeOfBody exprOrientedC_LANG_define_public_lambda_withTypeOfBody
#define declare_public_lambda_s_withTypeOfBody exprOrientedC_LANG_declare_public_lambda_s_withTypeOfBody
#define define_public_lambda_s_withTypeOfBody exprOrientedC_LANG_define_public_lambda_s_withTypeOfBody
#define declare_private_withTypeOfBody_lambda exprOrientedC_LANG_declare_private_withTypeOfBody_lambda
#define define_private_withTypeOfBody_lambda exprOrientedC_LANG_define_private_withTypeOfBody_lambda
#define declare_private_lambda_withTypeOfBody exprOrientedC_LANG_declare_private_lambda_withTypeOfBody
#define define_private_lambda_withTypeOfBody exprOrientedC_LANG_define_private_lambda_withTypeOfBody
#define declare_private_lambda_s_withTypeOfBody exprOrientedC_LANG_declare_private_lambda_s_withTypeOfBody
#define define_private_lambda_s_withTypeOfBody exprOrientedC_LANG_define_private_lambda_s_withTypeOfBody
#define declare_public_inline_withTypeOfBody_lambda exprOrientedC_LANG_declare_public_inline_withTypeOfBody_lambda
#define define_public_inline_withTypeOfBody_lambda exprOrientedC_LANG_define_public_inline_withTypeOfBody_lambda
#define declare_public_inline_lambda_withTypeOfBody exprOrientedC_LANG_declare_public_inline_lambda_withTypeOfBody
#define define_public_inline_lambda_withTypeOfBody exprOrientedC_LANG_define_public_inline_lambda_withTypeOfBody
#define declare_public_inline_lambda_s_withTypeOfBody exprOrientedC_LANG_declare_public_inline_lambda_s_withTypeOfBody
#define define_public_inline_lambda_s_withTypeOfBody exprOrientedC_LANG_define_public_inline_lambda_s_withTypeOfBody
#define declare_private_inline_withTypeOfBody_lambda exprOrientedC_LANG_declare_private_inline_withTypeOfBody_lambda
#define define_private_inline_withTypeOfBody_lambda exprOrientedC_LANG_define_private_inline_withTypeOfBody_lambda
#define declare_private_inline_lambda_withTypeOfBody exprOrientedC_LANG_declare_private_inline_lambda_withTypeOfBody
#define define_private_inline_lambda_withTypeOfBody exprOrientedC_LANG_define_private_inline_lambda_withTypeOfBody
#define declare_private_inline_lambda_s_withTypeOfBody exprOrientedC_LANG_declare_private_inline_lambda_s_withTypeOfBody
#define define_private_inline_lambda_s_withTypeOfBody exprOrientedC_LANG_define_private_inline_lambda_s_withTypeOfBody
